2016/6/5
多线程
1.程序:program 
2.进程:process 正在运行的一个程序
3.线程:thread 进程细化为线程.

4.何时需要多线程
(1).程序同一时间执行多个任务
(2).程序需要实现耗时任务

5.线程调度策略
(1)时间片轮转法
(2)抢占式:高优先级的线程抢占cpu
Java调度方式
(1)同优先级线程组成先进先出队列(先到先服务),使用时间片策略
(2)对高优先级,使用优先调度的抢占式策略

6.API中的Thread类
public
class Thread implements Runnable {
	
}

7.死锁
不同线程分别占用对方需要的同步资源不放弃,都在等待对方放弃自己需要的同步资源,就形成了线程的死锁.

8.notify(),notifyAll(),wait():定义在Object中
wait():令当前线程挂起并放弃cpu,同步资源使得别的线程可访问并修改共享资源.
notify():唤醒正在排队等待同步资源的线程中优先级最高者.使其结束等待
notifyAll():唤醒正在排队等待资源的所有线程结束等待

这三个方法只能在synchronized()方法或synchronized代码中使用