确认计算机虚拟环境(hardware在bios里设置)设为enable(运行安卓虚拟机)
www.android-studio.org
haxm下载(硬件加速器)software.intel.com intel

2.
cmd
释放内存
sc query haxm
sc start haxm

更新sdk
在Android studio安装目录bin目录下.找到idea.properties文件.最后加上.在文件最后追加disable.android.first.run=true
complete installation 
i do not..

打开第一项
如果找不到sdk
则
configure ->project defaults-> project structure-> sdks

sdk 默认目录
C:\Users\Administrator\AppData\Local\Android\sdk

代理服务器
mirrors.meusoft.edu.cn

api android-23对应安卓6.0
default setting

settings->apperance->sdk..

或者拷贝更新
sdk->(android-19拷贝到其下)

添加虚拟机 create 
通常选

D:\Program Files\apache-tomcat-6.0.29\bin;c:\gtk\bin;c:\gtk\bin;C:\Program Files (x86)\HaoZip;D:\Program Files\Java\jdk1.8.0_45\bin;c:\gtk\bin;C:\Program Files (x86)\HaoZip;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;D:\Program Files\Microsoft SQL Server\110\DTS\Binn\;D:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;D:\Program Files\Microsoft SQL Server\110\Tools\Binn\;D:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PrivateAssemblies\;D:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\


2016/3/2
tools->android->android device monitor 

android4.0-4.4 

Setting->Apperance->show line numbers ,show method separators

C:\Users\Administrator\AndroidStudioProjects\HelloWorld

file->new project->Empty Activity

1.linux kernel
2.java libraries(leiku)+android runtime(android leiku)
3.application farmework(kuangjia)
4.applications

android.sup

hellorld->app->src->main->res->layout->activity_main.xml配置布局

main->java里有MainActivity java类

dp=(px*160)/density[Ldpi,Mdpi,xhdpi,xxhdpi每英寸像素]
Mdpi每英寸160px
dp:相对.控件在不同机器里可以等比例放大
px:像素

package里是当前项目 详细

2016/3/3
在Android目录下
app
--manifests
  --AndroidManifest.xml
--java
  --com.example.administrator.firsthello
    --MainActivity
--res
  --drawable
  --layout
    --activity_main.xml
  --mipmap
    --ic_launcher.png
  --values
    --strings.xml
--Gradle Scripts


1.activity_main.xml用来编写界面.用Android标签.标记语言.
<?xml version="1.0" encoding="utf-8"?>
根元素是RelativeLayout,代表是一个相对布局

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity">
    文本框控件:TextView
    <TextView android:text="Hello World!" android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:id="@+id/textView" />
    普通按钮:Button
    <Button
        控件宽度:wrap_content恰好包裹内容.match_parent与父容器有相同的宽度
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="单击我"
	唯一标识符.在Java程序中 可以通过findViewById("id名")来获取指定的Android界面组件
        android:id="@+id/button" 
        android:layout_below="@+id/textView"
	距离右边距
        android:layout_toRightOf="@+id/textView"
	距离底部距离
        android:layout_toEndOf="@+id/textView"
	顶部余量
        android:layout_marginTop="61dp"

        android:onClick="clickHandler"
        />
    <Button
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="宽与父容器相同.高能包裹内容"
        android:id="@+id/button2"
        android:layout_below="@+id/textView"
        android:layout_toRightOf="@+id/textView"
        android:layout_toEndOf="@+id/textView"
        android:layout_marginTop="20dp"
        />
</RelativeLayout>

2.java类 MainAcitvity
完整路径FirstHello->app->src->main->java->com->example->administrator->firsthello->MainActivity
package com.example.administrator.firsthello;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //使用activity_main.xml文件定义的布局
        setContentView(R.layout.activity_main);
    }

//    public boolean onCreateOpeionMenu(Menu menu)
//    {
//        getMenuInflater().inflate(R.menu.menu_main,menu);
//        return true;
//    }
//
//    //单击事件处理方法.改变文本内容
//    public void clickHandler(View source)
//    {
//        //获取UI界面中ID为R.id.show的文本框
//        TextView tv=(TextView) findViewById(R.id.show);
//        tv.setText("HelloAndroid-"+new java.util.Date());
//    }
}

3.R.java 在Packages视图下
app->com.example.administrator.firsthello->test->R
完整路径
FirstHello->app->build->generated->source->r->debug->com->example->administrator->firsthello->R
R文件是根据应用中的资源自动生成的.每类资源对应R类中的一个内部类
public final class R{
   public static final class id{
      public static final int show=0x7f050000;
   }
   public static final class layout{
      ...
   }
   ...
}

4.res 在Android目录下app->res
完整路径FirstHello->app->src->main->res
res下有
drawable
layout
mipmap
values
--strings.xml

strings.xml中
<resources>
    <string name="app_name">FirstHello</string>
</resources>
则对应R类中生成R.string.app_name
可在Java类中通过R.string.app_name引用"FirstHello"字符串常量
在xml文件中使用资源
@string/app_name
分配标识符用android:id="@+id/mingzi"
在java类中用findViewById()调用
在xml中
@id/mingzi引用

5.AndroidManifest.xml
在Android视图下App->manifests->AndroidManifest.xml
完整路径FirstHello->app->src->main->AndroidManifest.xml

<?xml version="1.0" encoding="utf-8"?>
<manifest 
指定该Android应用的包名.唯一的标识该应用
xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.administrator.firsthello" >

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
	指定Android应用的标签.图标
        android:label="@string/app_name"

        android:supportsRtl="true"
        android:theme="@style/AppTheme" >
	指定Android应用的一个组件:Activity
        <activity android:name=".MainActivity" >

            <intent-filter>
	    指定该Activity是程序入口
                <action android:name="android.intent.action.MAIN" />
	    指定加载该应用时运行该Activity
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

6.Android基本组件
1.Activity和View
Acitvity通过setContentView(View)来显示组件.组件可在xml中定义
2.Service
在后台运行.为其他组件提供后台服务或监控其他组件的运行状态
3.BroadcastReceiver
广播消息接收器.类似于事件监听器.事件源是Android应用中的其他组件
4.ContentProvider
完成应用间数据交换


2016/3/7
C:\Users\Administrator\AppData\Local\Android\sdk\docs
打开网页
Develop->api->android.view



























view viewgroup


1.用java类定义界面
MainActivity.java
package com.example.administrator.ui0201;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity {

    @Override
    //onCreate里需有setContextView
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        LinearLayout linearLayout =new LinearLayout(this);//线性布局 .Content上下文(指Activity)
        setContentView(linearLayout);//
        linearLayout.setOrientation(LinearLayout.VERTICAL);//垂直方向;HORIZONTAL:水平方向放置按钮
        final TextView textView=new TextView(this);//文本框
        textView.setText("MyHelloWorld!");
        linearLayout.addView(textView);//将文本框加到MainActivity里

        Button bt1=new Button(this);
        bt1.setText("OK");
        linearLayout.addView(bt1);
        bt1.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                textView.setText("zccc" + new java.util.Date());
            }
        });
    }
}





packages app->android.support.v7->R 安卓的
packages app->com.example->test->R里的是自己定义的

2.用xml定义界面 mylayout.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent" android:layout_height="match_parent">

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="New Button"
        android:id="@+id/button1"
        android:layout_gravity="center_vertical" />

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/hello"
        android:textSize="20sp"
        android:id="@+id/textview01"
        />
</LinearLayout>

strings.xml

<resources>
    <string name="app_name">UI0201</string>
    <string name="hello">这是hello的字符串</string>
</resources>

静态的属性直接在xml中定义即可.属性需要修改时.在java类中通过方法进行修改.

MainActivity.java
package com.example.administrator.ui0201;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends AppCompatActivity implements  View.OnClickListener {
    private TextView textView1;
    private Button bt1;
    private Button bt2;

    @Override
    //onCreate里需有setContextView
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.mylayout);//

        textView1=(TextView)findViewById(R.id.textview01);//View类型转换为TextView类型(TextView是View类型的子类)
        bt1=(Button)findViewById(R.id.button1);
        bt1.setOnClickListener(this);
        bt2=(Button)findViewById(R.id.button2);


    }

    @Override
    public void onClick(View v){//参数View为事件源.相当于Resource
        switch(v.getId())
        {
            case R.id.button1:
                bt1.setText("anniu1");
                break;
            case R.id.button2:
                bt2.setText("eheheh");
                    break;
            default:
                break;
        }
        textView1.setText("Hello World!"+new java.util.Date());
    }
}




2016/3/9
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent" android:layout_height="match_parent"
    android:orientation="vertical"

    android:gravity="bottom|center_horizontal"

    >

    <!-- gravity 布局里的所有组件的布局方式
        android:layout_gravity="right"该组件在其父容器中的位置
    -->
<!--坐标是第四象限-->
    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="按钮1"
        android:id="@+id/button" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="按钮2"
        android:id="@+id/button5"
        android:layout_gravity="center_vertical" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="按钮3"
        android:id="@+id/button4" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="按钮4"
        android:id="@+id/button3" />

    <Button
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="按钮五"
        android:id="@+id/button2"
        android:layout_gravity="right" />
</LinearLayout>

















